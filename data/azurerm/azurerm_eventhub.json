{
    "azurerm_eventhub": {
        "status": "ASSESS",
        "subcategory": "Messaging",
        "layout": "azurerm",
        "page_title": "Azure Resource Manager: azurerm_eventhub",
        "description": "Manages a Event Hubs as a nested resource within an Event Hubs namespace.",
        "arguments": {
            "name": {
                "description": "The Name of the Destination where the capture should take place. At this time the only supported value is `EventHubArchive.AzureBlockBlob`.",
                "required": false,
                "policy": "",
                "notes": [
                    "-> At this time it's only possible to Capture EventHub messages to Blob Storage. There's [a Feature Request for the Azure SDK to add support for Capturing messages to Azure Data Lake here](https://github.com/Azure/azure-rest-api-specs/issues/2255)."
                ]
            },
            "namespace_name": {
                "description": "Specifies the name of the EventHub Namespace. Changing this forces a new resource to be created.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "resource_group_name": {
                "description": "The name of the resource group in which the EventHub's parent Namespace exists. Changing this forces a new resource to be created.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "partition_count": {
                "description": "Specifies the current number of shards on the Event Hub. Changing this forces a new resource to be created.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "message_retention": {
                "description": "Specifies the number of days to retain the events for this Event Hub. Needs to be between 1 and 7 days; or 1 day when using a Basic SKU for the parent EventHub Namespace.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "capture_description": {
                "description": "A `capture_description` block as defined below.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "enabled": {
                "description": "Specifies if the Capture Description is Enabled.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "encoding": {
                "description": "Specifies the Encoding used for the Capture Description. Possible values are `Avro` and `AvroDeflate`.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "interval_in_seconds": {
                "description": "Specifies the time interval in seconds at which the capture will happen. Values can be between `60` and `900` seconds. Defaults to `300` seconds.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "size_limit_in_bytes": {
                "description": "Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between `10485760` and `524288000`  bytes. Defaults to `314572800` bytes.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "skip_empty_archives": {
                "description": "Specifies if empty files should not be emitted if no events occur during the Capture time window.  Defaults to `false`.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "destination": {
                "description": "A `destination` block as defined below.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "archive_name_format": {
                "description": "are mandatory irrespective of order",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "blob_container_name": {
                "description": "The name of the Container within the Blob Storage Account where messages should be archived.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "storage_account_id": {
                "description": "The ID of the Blob Storage Account where messages should be archived.",
                "required": false,
                "policy": "",
                "notes": ""
            }
        },
        "attributes": {
            "id": {
                "description": "The ID of the EventHub."
            },
            "partition_ids": {
                "description": "The identifiers for partitions created for Event Hubs."
            }
        },
        "timeouts": {
            "create": {
                "description": "Used when creating the EventHub.",
                "required": false,
                "timeout": 30
            },
            "update": {
                "description": "Used when updating the EventHub.",
                "required": false,
                "timeout": 30
            },
            "read": {
                "description": "Used when retrieving the EventHub.",
                "required": false,
                "timeout": 5
            },
            "delete": {
                "description": "Used when deleting the EventHub.",
                "required": false,
                "timeout": 30
            }
        }
    }
}