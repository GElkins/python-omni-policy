{
    "azurerm_function_app": {
        "status": "ASSESS",
        "subcategory": "App Service (Web Apps)",
        "layout": "azurerm",
        "page_title": "Azure Resource Manager: azurerm_function_app",
        "description": "Manages a Function App.",
        "arguments": {
            "name": {
                "description": "The name of the Connection String.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "resource_group_name": {
                "description": "The name of the resource group in which to create the Function App.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "location": {
                "description": "Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "app_service_plan_id": {
                "description": "The ID of the App Service Plan within which to create this Function App.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "storage_account_name": {
                "description": "The backend storage account name which will be used by this Function App (such as the dashboard, logs).",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "storage_account_access_key": {
                "description": "The access key which will be used to access the backend storage account for the Function App.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "app_settings": {
                "description": "A key-value pair of App Settings.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "auth_settings": {
                "description": "A `auth_settings` block as defined below.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "enable_builtin_logging": {
                "description": "Should the built-in logging of this Function App be enabled? Defaults to `true`.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "connection_string": {
                "description": "An `connection_string` block as defined below.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "os_type": {
                "description": "A string indicating the Operating System type for this function app. ",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "client_affinity_enabled": {
                "description": "Should the Function App send session affinity cookies, which route client requests in the same session to the same instance?",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "enabled": {
                "description": "Is Authentication enabled?",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "https_only": {
                "description": "Can the Function App only be accessed via HTTPS? Defaults to `false`.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "version": {
                "description": "The runtime version associated with the Function App. Defaults to `~1`.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "daily_memory_time_quota": {
                "description": "The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps under the consumption plan. Defaults to `0`.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "site_config": {
                "description": "A `site_config` object as defined below.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "identity": {
                "description": "An `identity` block as defined below.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "tags": {
                "description": "A mapping of tags to assign to the resource.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "type": {
                "description": "Specifies the identity type of the Function App. Possible values are `SystemAssigned` (where Azure will generate a Service Principal for you), `UserAssigned` where you can specify the Service Principal IDs in the `identity_ids` field, and `SystemAssigned, UserAssigned` which assigns both a system managed identity as well as the specified user assigned identities.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "value": {
                "description": "The value for the Connection String.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "always_on": {
                "description": "Should the Function App be loaded at all times? Defaults to `false`.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "use_32_bit_worker_process": {
                "description": "Should the Function App run in 32 bit mode, rather than 64 bit mode? Defaults to `true`.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "websockets_enabled": {
                "description": "Should WebSockets be enabled?",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "linux_fx_version": {
                "description": "Linux App Framework and version for the AppService, e.g. `DOCKER|(golang:latest)`.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "http2_enabled": {
                "description": "Specifies whether or not the http2 protocol should be enabled. Defaults to `false`.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "min_tls_version": {
                "description": "The minimum supported TLS version for the function app. Possible values are `1.0`, `1.1`, and `1.2`. Defaults to `1.2` for new function apps.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "ftps_state": {
                "description": "State of FTP / FTPS service for this function app. Possible values include: `AllAllowed`, `FtpsOnly` and `Disabled`.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "pre_warmed_instance_count": {
                "description": "The number of pre-warmed instances for this function app. Only affects apps on the Premium plan.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "cors": {
                "description": "A `cors` block as defined below.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "ip_restriction": {
                "description": "A [List of objects](/docs/configuration/attr-as-blocks.html",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "allowed_origins": {
                "description": "A list of origins which should be able to make cross-origin calls. `*` can be used to allow all calls.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "support_credentials": {
                "description": "Are credentials supported?",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "identity_ids": {
                "description": "Specifies a list of user managed identity ids to be assigned. Required if `type` is `UserAssigned`.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "active_directory": {
                "description": "A `active_directory` block as defined below.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "additional_login_params": {
                "description": "Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form \"key=value\".",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "allowed_external_redirect_urls": {
                "description": "External URLs that can be redirected to as part of logging in or logging out of the app.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "default_provider": {
                "description": "The default provider to use when multiple providers have been set up. Possible values are `AzureActiveDirectory`, `Facebook`, `Google`, `MicrosoftAccount` and `Twitter`.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "facebook": {
                "description": "A `facebook` block as defined below.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "google": {
                "description": "A `google` block as defined below.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "issuer": {
                "description": "Issuer URI. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "microsoft": {
                "description": "A `microsoft` block as defined below.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "runtime_version": {
                "description": "The runtime version of the Authentication/Authorization module.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "token_refresh_extension_hours": {
                "description": "The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to 72.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "token_store_enabled": {
                "description": "If enabled the module will durably store platform-specific security tokens that are obtained during login flows. Defaults to false.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "twitter": {
                "description": "A `twitter` block as defined below.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "unauthenticated_client_action": {
                "description": "The action to take when an unauthenticated client attempts to access the app. Possible values are `AllowAnonymous` and `RedirectToLoginPage`.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "client_id": {
                "description": "The OAuth 2.0 client ID that was created for the app used for authentication.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "client_secret": {
                "description": "The OAuth 2.0 client secret that was created for the app used for authentication.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "allowed_audiences": {
                "description": "Allowed audience values to consider when validating JWTs issued by Azure Active Directory.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "app_id": {
                "description": "The App ID of the Facebook app used for login",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "app_secret": {
                "description": "The App Secret of the Facebook app used for Facebook Login.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "oauth_scopes": {
                "description": "The OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. https://msdn.microsoft.com/en-us/library/dn631845.aspx",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "ip_address": {
                "description": "The IP Address CIDR notation used for this IP Restriction.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "subnet_id": {
                "description": "The Subnet ID used for this IP Restriction.",
                "required": false,
                "policy": "",
                "notes": [
                    "-> ",
                    " One of either `ip_address` or `subnet_id` must be specified"
                ]
            }
        },
        "attributes": {
            "id": {
                "description": "The ID of the Function App"
            },
            "default_hostname": {
                "description": "The default hostname associated with the Function App "
            },
            "outbound_ip_addresses": {
                "description": "A comma separated list of outbound IP addresses "
            },
            "possible_outbound_ip_addresses": {
                "description": "A comma separated list of outbound IP addresses "
            },
            "identity": {
                "description": "An `identity` block as defined below, which contains the Managed Service Identity information for this App Service."
            },
            "site_credential": {
                "description": "A `site_credential` block as defined below, which contains the site-level credentials used to publish to this App Service."
            },
            "kind": {
                "description": "The Function App kind "
            },
            "principal_id": {
                "description": "The Principal ID for the Service Principal associated with the Managed Service Identity of this App Service."
            },
            "tenant_id": {
                "description": "The Tenant ID for the Service Principal associated with the Managed Service Identity of this App Service."
            },
            "username": {
                "description": "The username which can be used to publish to this App Service"
            },
            "password": {
                "description": "The password associated with the username, which can be used to publish to this App Service."
            }
        },
        "timeouts": {
            "create": {
                "description": "Used when creating the Function App.",
                "required": false,
                "timeout": 30
            },
            "update": {
                "description": "Used when updating the Function App.",
                "required": false,
                "timeout": 30
            },
            "read": {
                "description": "Used when retrieving the Function App.",
                "required": false,
                "timeout": 5
            },
            "delete": {
                "description": "Used when deleting the Function App.",
                "required": false,
                "timeout": 30
            }
        }
    }
}