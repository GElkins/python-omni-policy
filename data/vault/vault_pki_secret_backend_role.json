{
    "vault_pki_secret_backend_role": {
        "status": "ASSESS",
        "layout": "vault",
        "page_title": "Vault: vault_pki_secret_backend_role resource",
        "sidebar_current": "docs-vault-resource-pki-secret-backend-role",
        "description": "Create a role on an PKI Secret Backend for Vault.",
        "arguments": {
            "backend": {
                "description": "The path the PKI secret backend is mounted at, with no leading or trailing `/`s.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "name": {
                "description": "The name to identify this role within the backend. Must be unique within the backend.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "ttl": {
                "description": "The TTL",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "max_ttl": {
                "description": "The maximum TTL",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "allow_localhost": {
                "description": "Flag to allow certificates for localhost",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "allowed_domains": {
                "description": "List of allowed domains for certificates ",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "allow_bare_domains": {
                "description": "Flag to allow certificates matching the actual domain",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "allow_subdomains": {
                "description": "Flag to allow certificates matching subdomains",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "allow_glob_domains": {
                "description": "Flag to allow names containing glob patterns.",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "allow_any_name": {
                "description": "Flag to allow any name",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "enforce_hostnames": {
                "description": "Flag to allow only valid host names",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "allow_ip_sans": {
                "description": "Flag to allow IP SANs",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "allowed_uri_sans": {
                "description": "Defines allowed URI SANs",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "allowed_other_sans": {
                "description": "Defines allowed custom SANs",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "server_flag": {
                "description": "Flag to specify certificates for server use",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "client_flag": {
                "description": "Flag to specify certificates for client use",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "code_signing_flag": {
                "description": "Flag to specify certificates for code signing use",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "email_protection_flag": {
                "description": "Flag to specify certificates for email protection use",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "key_type": {
                "description": "The type of generated keys",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "key_bits": {
                "description": "The number of bits of generated keys",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "key_usage": {
                "description": "Specify the allowed key usage constraint on issued certificates",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "ext_key_usage": {
                "description": "Specify the allowed extended key usage constraint on issued certificates",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "use_csr_common_name": {
                "description": "Flag to use the CN in the CSR",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "use_csr_sans": {
                "description": "Flag to use the SANs in the CSR",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "ou": {
                "description": "The organization unit of generated certificates",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "organization": {
                "description": "The organization of generated certificates",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "country": {
                "description": "The country of generated certificates",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "locality": {
                "description": "The locality of generated certificates",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "province": {
                "description": "The province of generated certificates",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "street_address": {
                "description": "The street address of generated certificates",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "postal_code": {
                "description": "The postal code of generated certificates",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "generate_lease": {
                "description": "Flag to generate leases with certificates",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "no_store": {
                "description": "Flag to not store certificates in the storage backend",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "require_cn": {
                "description": "Flag to force CN usage",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "policy_identifiers": {
                "description": "Specify the list of allowed policies IODs",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "basic_constraints_valid_for_non_ca": {
                "description": "Flag to mark basic constraints valid when issuing non-CA certificates",
                "required": false,
                "policy": "",
                "notes": ""
            },
            "not_before_duration": {
                "description": "Specifies the duration by which to backdate the NotBefore property.",
                "required": false,
                "policy": "",
                "notes": ""
            }
        },
        "attributes": {},
        "timeouts": {}
    }
}